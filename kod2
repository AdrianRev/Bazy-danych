if (decyzja == 'J' || decyzja == 'j')
			{
				bool has_already_checeked = false;
				bool shouldBreak = false;
				int rotation = 1;
				int distance = NXT::Sensor::GetSonarValue(&comm, IN_1);
				int scan_counter = 0;
				do
				{
					if (rotation == 1)
					{
						NXT::Motor::SetReverse(&comm, OUT_B, y);
						NXT::Motor::SetForward(&comm, OUT_C, y);
					}
					else
					{
						NXT::Motor::SetForward(&comm, OUT_B, y);
						NXT::Motor::SetReverse(&comm, OUT_C, y);
					}
					do
					{
						Wait(20);
						distance = NXT::Sensor::GetSonarValue(&comm, IN_1);
						scan_counter++;
						if (scan_counter == 250)
						{
							rotation *= -1;
							scan_counter = 0;
							if (rotation == 1)
							{
								NXT::Motor::SetReverse(&comm, OUT_B, y);
								NXT::Motor::SetForward(&comm, OUT_C, y);
							}
							else
							{
								NXT::Motor::SetForward(&comm, OUT_B, y);
								NXT::Motor::SetReverse(&comm, OUT_C, y);
							}
						}

						if (kbhit() == true)
						{
							shouldBreak = true;
							decyzja = getch();
							break;
						}

					} while (distance >= 51);
					Wait(100);
					NXT::Motor::SetForward(&comm, OUT_B, x);
					NXT::Motor::SetForward(&comm, OUT_C, x);
					color = NXT::Sensor::GetValue(&comm, IN_2);
					while (color >= 25)
					{
						if (kbhit() == true)
						{
							shouldBreak = true;
							decyzja = getch();
							break;
						}
						else
						{
							color = NXT::Sensor::GetValue(&comm, IN_2);
						}	

					}
					if (has_already_checeked == true)
					{
						NXT::Motor::SetForward(&comm, OUT_B, 0);
						NXT::Motor::SetForward(&comm, OUT_C, 0);
						NXT::Motor::Stop(&comm, OUT_B, 0);
						NXT::Motor::Stop(&comm, OUT_C, 0);
						shouldBreak = true;
						break;
					}
					NXT::Motor::SetReverse(&comm, OUT_B, x);
					NXT::Motor::SetReverse(&comm, OUT_C, x);
					Wait(4000);
					has_already_checeked = true;
					if (kbhit() == true)
					{
						shouldBreak = true;
						decyzja = getch();
					}
				} while (shouldBreak == false);
				
			}
